{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red245\green245\blue245;\red0\green0\blue0;
\red25\green28\blue31;\red255\green255\blue255;\red25\green28\blue31;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c96863\c96863\c96863;\cssrgb\c0\c0\c0\c84706;
\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c12941\c14510\c16078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Read data with smart contract with web3.js?\
\
Before reading we need to connect to an ethereum node with JSON RPC on the main net to access an ethereum node.\
We need to setup a Node by entering command \'93 Node\'94\
\
Now you are In the console we need web3.js enter command - 
\f1\b constant web3 = require(\'91web3\'92);
\f0\b0 \
\
We need to have a variable to create a new web3 connection enter command - 
\f1\b const rpcURL = \'93\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 https://holesky.infura.io/v3/4b9698325f7845cf9c72af605ece321c\'94;
\f0\b0 \
\
Now we can imitate a web3 connection with command -
\f1\b const web3 =new web3(rpcURL);
\f0\b0 \
\
We will have a live web3 with ethereum mainnet.\
\
We need to have a ABI(Abstract Binary Interface)\
\
Const abi = \cf4 \cb1 \outl0\strokewidth0 const abi = [\{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"name","outputs":[\{"name":"","type":"string"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"_spender","type":"address"\},\{"name":"_value","type":"uint256"\}],"name":"approve","outputs":[],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"totalSupply","outputs":[\{"name":"","type":"uint256"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"_from","type":"address"\},\{"name":"_to","type":"address"\},\{"name":"_value","type":"uint256"\}],"name":"transferFrom","outputs":[],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"decimals","outputs":[\{"name":"","type":"uint256"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[],"name":"unpause","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"_to","type":"address"\},\{"name":"_amount","type":"uint256"\}],"name":"mint","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"paused","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[\{"name":"_owner","type":"address"\}],"name":"balanceOf","outputs":[\{"name":"balance","type":"uint256"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[],"name":"finishMinting","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[],"name":"pause","outputs":[\{"name":"","type":"bool"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"owner","outputs":[\{"name":"","type":"address"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[],"name":"symbol","outputs":[\{"name":"","type":"string"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"_to","type":"address"\},\{"name":"_value","type":"uint256"\}],"name":"transfer","outputs":[],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"_to","type":"address"\},\{"name":"_amount","type":"uint256"\},\{"name":"_releaseTime","type":"uint256"\}],"name":"mintTimelocked","outputs":[\{"name":"","type":"address"\}],"payable":false,"type":"function"\},\{"constant":true,"inputs":[\{"name":"_owner","type":"address"\},\{"name":"_spender","type":"address"\}],"name":"allowance","outputs":[\{"name":"remaining","type":"uint256"\}],"payable":false,"type":"function"\},\{"constant":false,"inputs":[\{"name":"newOwner","type":"address"\}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"\},\{"anonymous":false,"inputs":[\{"indexed":true,"name":"to","type":"address"\},\{"indexed":false,"name":"value","type":"uint256"\}],"name":"Mint","type":"event"\},\{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"\},\{"anonymous":false,"inputs":[],"name":"Pause","type":"event"\},\{"anonymous":false,"inputs":[],"name":"Unpause","type":"event"\},\{"anonymous":false,"inputs":[\{"indexed":true,"name":"owner","type":"address"\},\{"indexed":true,"name":"spender","type":"address"\},\{"indexed":false,"name":"value","type":"uint256"\}],"name":"Approval","type":"event"\},\{"anonymous":false,"inputs":[\{"indexed":true,"name":"from","type":"address"\},\{"indexed":true,"name":"to","type":"address"\},\{"indexed":false,"name":"value","type":"uint256"\}],"name":"Transfer","type":"event"\}]\
\
\
Now we need to store a address to get the balance write the following command - 
\f1\b const address = \'93\cf5 \cb6 \outl0\strokewidth0 \strokec5 0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5\'94;
\f0\b0 \
\
\cf2 \cb3 \strokec2 Now we need to create a token with cmd = const contract =
\f1\b  new web3.eth.Contract(abi,address);
\f0\b0 \
\
Now let us check the balance of the given account = 
\f1\b contract.methods.balanceOf(\'91\cf7 \cb6 \outl0\strokewidth0 0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5).call((err, result) => \{console.log(results)\});
\f0\b0 \
\
This is how we read the data with smart contract\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\
\cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}